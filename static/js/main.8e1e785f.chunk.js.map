{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","_name","e","names","undefined","target","name","vales","value","setState","console","log","state","handleClicl","arrays","taskid","taskname","startdate","enddate","duration","percent","dependencies","rows","Date","columns","type","label","bind","this","textField","marginLeft","marginRight","Container","maxWidth","chartType","loader","data","width","height","Grid","container","spacing","item","xs","md","Paper","style","padding","JSON","stringify","TextField","id","margin","variant","onChange","DatePicker","autoOk","inputVariant","format","Button","color","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","utils","DateFnsUtils","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e1e785f.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\n\nimport { Container, Button, Grid, Paper, TextField } from '@material-ui/core';\nimport { DatePicker } from '@material-ui/pickers';\nimport Chart from 'react-google-charts';\nimport { datePickerDefaultProps } from '@material-ui/pickers/constants/prop-types';\n\n// function daysToMilliseconds(days) {\n//   return days * 24 * 60 * 60 * 1000;\n// }\n\nexport class App extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      taskid: \"\",\n      taskname: \"\",\n      startdate: new Date(),\n      enddate: new Date(),\n      duration: null,\n      percent: \"\",\n      dependencies: \"\",\n      columns: [\n        { type: \"string\", label: \"Task ID\" },\n        { type: \"string\", label: \"Task Name\" },\n        { type: \"date\", label: \"Start Date\" },\n        { type: \"date\", label: \"End Date\" },\n        { type: \"number\", label: \"Duration\" },\n        { type: \"number\", label: \"Percent Complete\" },\n        { type: \"string\", label: \"Dependencies\" }\n      ],\n      rows: [\n        [\n          \"0001\",\n          \"ทดสอบครั้งที่ 1\",\n          new Date(2019, 9, 1),\n          new Date(2019, 9, 25),\n          null,\n          10,\n          null\n        ],\n        [\n          '0002',\n          'ทดสอบครั้งที่ 2',\n          new Date(2019, 9, 20),\n          new Date(2019, 9, 22),\n          null,\n          40,\n          '0001',\n        ],\n      ]\n    }\n\n    console.log(this.state.rows);\n\n    this.handleChange = this.handleChange.bind(this)\n\n  }\n\n  componentDidMount() {\n\n    // let ccc =\n    //   [\n    //     'Test1',\n    //     'Test1',\n    //     new Date(2019, 0, 20),\n    //     new Date(2019, 0, 22),\n    //     null,\n    //     40,\n    //     'Research',\n    //   ]\n\n    // console.log(this.state.conditionRaw);\n    // this.setState({ conditionRaw: ccc }, () => { console.log(this.state.conditionRaw); });\n\n    // var nrows = ~~(Math.random() * 10);\n    // var ncols = ~~(Math.random() * 10);\n    // console.log(`rows:${nrows}`);\n    // console.log(`cols:${ncols}`);\n    // // var matrix = new Array(nrows).fill(0).map(row => {\n    // //   console.log(row);\n    // //  return new Array(ncols).fill(0)\n    // // });\n    // var matrix = new Array();\n    // var adds = matrix.push(ccc);\n    // console.log(matrix);\n    // console.log(adds);\n\n    // this.setState((state) => {\n    //   return { rows: [...state.rows, ccc] };\n    // });\n\n  }\n\n  handleChange = _name => e => {\n    let names = _name == undefined ? e.target.name : _name;\n    let vales = _name == undefined ? e.target.value : e;\n    this.setState({ [names]: vales }, () => {\n      console.log(this.state);\n    });\n  }\n\n  handleClicl = () => {\n    let arrays = [\n      this.state.taskid,\n      this.state.taskname,\n      this.state.startdate,\n      this.state.enddate,\n      this.state.duration,\n      this.state.percent,\n      this.state.dependencies == \"\" ? null : this.state.dependencies,\n    ]\n    this.setState((state) => {\n      return { rows: [...state.rows, arrays] };\n    });\n  }\n\n  // handleAdd = e => {\n  //   this.setState({ rows: this.state.rows.push([]) })\n  //   console.log(this.state);\n  // }\n\n  render() {\n\n    let { columns, rows } = this.state;\n\n    const textField = {\n      marginLeft: '9px',\n      marginRight: '9px',\n    };\n\n    return (\n      <Container maxWidth=\"lg\">\n        <Chart\n          chartType=\"Gantt\"\n          loader={<div>Loading Chart</div>}\n          data={[columns, ...rows]}\n          width=\"100%\"\n          height=\"50%\"\n        // options={options}\n        />\n\n        <Grid container spacing={3}>\n          <Grid item xs={6} md={3}>\n            <Paper style={{ padding: '6px' }}>\n              <pre>\n                {JSON.stringify(columns, null, 2)}\n              </pre>\n            </Paper>\n          </Grid>\n          <Grid item xs={6} md={3}>\n            <Paper style={{ padding: '6px' }}>\n              <pre>\n                {JSON.stringify(rows, null, 2)}\n              </pre>\n            </Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper style={{ padding: '6px' }}>\n              <TextField\n                id=\"taskid\"\n                name=\"taskid\"\n                label=\"Task ID\"\n                style={textField}\n                margin=\"dense\"\n                variant=\"outlined\"\n                value={this.state.taskid}\n                onChange={this.handleChange()}\n              />\n              <TextField\n                id=\"taskname\"\n                name=\"taskname\"\n                label=\"Task Name\"\n                style={textField}\n                margin=\"dense\"\n                variant=\"outlined\"\n                value={this.state.taskname}\n                onChange={this.handleChange()}\n              />\n\n              <DatePicker\n                style={textField}\n                margin=\"dense\"\n                autoOk\n                id=\"startdate\"\n                name=\"startdate\"\n                variant=\"inline\"\n                inputVariant=\"outlined\"\n                format=\"dd/MM/yyyy\"\n                value={this.state.startdate}\n                onChange={this.handleChange('startdate')}\n              />\n\n              <DatePicker\n                style={textField}\n                margin=\"dense\"\n                autoOk\n                id=\"enddate\"\n                name=\"enddate\"\n                variant=\"inline\"\n                inputVariant=\"outlined\"\n                format=\"dd/MM/yyyy\"\n                value={this.state.enddate}\n                onChange={this.handleChange('enddate')}\n              />\n\n              <TextField\n                id=\"percent\"\n                name=\"percent\"\n                label=\"Percent\"\n                style={textField}\n                margin=\"dense\"\n                variant=\"outlined\"\n                value={this.state.percent}\n                onChange={this.handleChange()}\n              />\n\n              <TextField\n                id=\"dependencies\"\n                name=\"dependencies\"\n                label=\"Dependencies\"\n                style={textField}\n                margin=\"dense\"\n                variant=\"outlined\"\n                value={this.state.dependencies}\n                onChange={this.handleChange()}\n              />\n\n              <Button variant=\"contained\" color=\"primary\" style={textField} onClick={this.handleClicl}>\n                Add\n              </Button>\n\n            </Paper>\n          </Grid>\n        </Grid>\n\n      </Container>\n    )\n  }\n\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\n\nReactDOM.render(\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <App />\n    </MuiPickersUtilsProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}